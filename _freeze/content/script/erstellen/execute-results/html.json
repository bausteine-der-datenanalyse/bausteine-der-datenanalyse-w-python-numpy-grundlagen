{
  "hash": "5607249f40dc0f54330c9ef1590e3232",
  "result": {
    "engine": "jupyter",
    "markdown": "## Erstellen von numpy arrays\n\n\n\nTpyischerweise werden in Python Vektoren durch Listen und Matritzen durch \ngeschachtelte Listen ausgedrückt. Beispielsweise würde man den Vektor\n\n:::: {layout-ncol=3 layout-valign=\"center\" layout-halign=\"center\"}\n$$\n(1, 2, 3, 4, 5, 6) \n$$\n\n::: {.justify}\nund die Matrix\n:::\n\n$$\n\\begin{pmatrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\n\\end{pmatrix}\n$$\n::::\n\nnativ in Python so erstellen:\n\n::: {#ce017cf9 .cell execution_count=2}\n``` {.python .cell-code}\nliste = [1, 2, 3, 4, 5, 6]\n\nmatrix = [[1, 2, 3], [4, 5, 6]]\n\nprint(liste)\nprint(matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6]\n[[1, 2, 3], [4, 5, 6]]\n```\n:::\n:::\n\n\nMöchte man jetzt NumPy Arrays verwenden benutzt man den Befehl `np.array()`. \n\n::: {#7017d610 .cell execution_count=3}\n``` {.python .cell-code}\nliste = np.array([1, 2, 3, 4, 5, 6])\n\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(liste)\nprint(matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5 6]\n[[1 2 3]\n [4 5 6]]\n```\n:::\n:::\n\n\nBetrachtet man die Ausgaben der `print()` Befehle fallen zwei Sachen auf.\nZum einen fallen die Kommata weg und zum anderen wird die Matrix passend\nausgegeben.\n\nEs gibt auch die Möglichkeit höherdimensionale Arrays zu erstellen. Dabei \nwird eine neue ebene der Verscahchtelung benutzt. Im folgenden Beispiel wird \neine drei-dimensionale Matrix erstellt.\n\n::: {#c1e27231 .cell execution_count=4}\n``` {.python .cell-code}\nmatrix_3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n```\n:::\n\n\nManchmal werden Arrays auch nach und nach befüllt. Auch hierfür bietet NumPy \npassende Funktionen. \n\nMit `np.empty()` erzeugt man ein leeres Array, wobei die Dateneintrage ungesetzt \nbleiben. Der Funktion wird die Form im Format `[Reihen,Spalten]` übergeben. Man \nbeachte die Zufälligen Werte die an diesen Stellen im Speicher liegen können.\n\n::: {#3fdfc853 .cell execution_count=5}\n``` {.python .cell-code}\nnp.empty([2,3])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {.callout-warning}\nBenutzt man die Funktion empty werden die Einträge im Array nicht initialisiert. \nEs können damit zufällige Werte im Array vorkommen. Daher empfiehlt es sich eher \nArrays mit festen Werten zu initialisieren.\n:::\n\nAlternativ können Arrays auch mit festgesetzten Werten initialisiert werden. \nDafür kann entweder die Funktion `np.zeros()`verwendet werden die alle Werte \nauf 0 setzt, oder aber `np.ones()`welche alle Werte mit 1 initialisiert. Möchte \nman alle Einträge auf einen spezifischen Wert setzen kann man den Befehl \n`np.full()` benutzen.\n\n::: {#2360f314 .cell execution_count=6}\n``` {.python .cell-code}\nnp.zeros([2,3])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {#b7c0663c .cell execution_count=7}\n``` {.python .cell-code}\nnp.ones([2,3])\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([[1., 1., 1.],\n       [1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {#cae8b781 .cell execution_count=8}\n``` {.python .cell-code}\nnp.full([2,3],7)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([[7, 7, 7],\n       [7, 7, 7]])\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Wie könnte man auch Arrays die mit einer Zahl x gefühlt sind erstellen?\n\nDer Trick beseht hierbei ein Array mit `np.ones()` zu initialisiere und dieses \nArray dann mit der Zahl x zu multiplizieren. Im folgenden Beispiel ist `x = 5`\n\n::: {#b7e704a4 .cell execution_count=9}\n``` {.python .cell-code}\nnp.ones([2,3]) * 5\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([[5., 5., 5.],\n       [5., 5., 5.]])\n```\n:::\n:::\n\n\n:::\n\nMöchte man zum Beispiel für eine Achse in einem Plot einen Vektor mit \ngleichmäßig verteilten Werten erstellen, bieten sich in NumPy zwei \nMöglichkeiten. Mit den Befehelen `np.linspace(Start,Stop,#Anzahl Werte)` und \n`np.arrange(Start,Stop,Abstand zwischen Werten)` können sollche Arrays erstelt \nwerden.\n\n::: {#eb0945b1 .cell execution_count=10}\n``` {.python .cell-code}\nnp.linspace(0,1,11)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n```\n:::\n:::\n\n\n::: {#569509e1 .cell execution_count=11}\n``` {.python .cell-code}\nnp.arange(0,10,2)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray([0, 2, 4, 6, 8])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "erstellen_files"
    ],
    "filters": [],
    "includes": {}
  }
}