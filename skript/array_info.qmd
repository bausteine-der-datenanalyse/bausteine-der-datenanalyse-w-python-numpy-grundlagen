# Größe, Struktur und Typ

```{python}
#| echo: false
import numpy as np
```

Wenn man sich nicht mehr sicher ist, welche Struktur oder Form ein Array hat oder 
oder diese Größen zum Beispiel für Schleifen nutzen möchte, bietet NumPy 
folgende Funktionen für das Auslesen dieser Größen an.

```{python}
matrix = np.array([[1, 2, 3], [4, 5, 6]])
```

`np.shape()` gibt die Längen der einzelnen Dimension in Form einer Liste zurück. 
```{python}
np.shape(matrix)
```

Die native Python Funktion `len()` gibt dagegen nur die Länge der ersten 
Dimension, also die Anzahl der Elemente in den äußeren Klammern wieder. 
```{python}
len(matrix)
```

Die Funktion `np.ndym()`gibt im Gegensatz zu `np.shape()` nur die Anzahl der 
Dimensionen zurück. 

```{python}
np.ndim(matrix)
```

::: {.callout-tip collapse="true"}
## Die Ausgabe von `np.ndim()` kann mit `np.size()`und einer nativen Python Funktion erreicht werden. Wie?

`np.ndim()` gibt die Länge der Liste von `np.shape()` aus
```{python}
len(np.shape(matrix))
```
:::

Möchte man die Anzahl aller Elemente in einem Array ausgeben kann man die 
Funktion `np.size()` benutzen.

```{python}
np.size(matrix)
```

NumPy Arrays können verschiedene Datentypen beinhalten. Im folgenden haben wir 
drei verschiedene Arrays mit einem jeweils anderen Datentypen.

```{python}
typ_a = np.array([1, 2, 3, 4, 5])
typ_b = np.array([0.1, 0.2, 0.3, 0.4, 0.5])
typ_c = np.array(["Montag", "Dienstag", "Mittwoch"])
```

Mit der Methode `np.dtype` können wir den Datentypen von Arrays ausgeben lassen. 
Meist wird dabei der Typ plus eine Zahl ausgegeben, welche die zum Speichern 
benötigte Bytezahl angibt. Das Array *typ_a* beinhaltet den Datentypen int64, 
also ganze Zahlen.

```{python}
print(typ_a.dtype)
```

Das Array *typ_b* beinhaltet den Datentypen float64, wobei float für 
Gleitkommazahlen steht.

```{python}
print(typ_b.dtype)
```

Das Array *typ_c* beinhaltet den Datentypen U8, wobei das U für Unicode steht. 
Hier wird als Unicodetext gespeichert.

```{python}
print(typ_c.dtype)
```

Im folgenden finden Sie eine Tabelle mit den typischen Datentypen, die sie 
häufig antreffen.

| Datentyp              | Numpy Name | Beispiele                  |
|-----------------------|------------|----------------------------|
| Wahrheitswert         | `bool`     | [True, False, True]        |
| Ganze Zahl            | `int`      | [-2, 5, -6, 7, 3]          |
| positive Ganze Zahlen | `uint`     | [1, 2, 3, 4, 5]            |
| Kommazahlen           | `float`    | [1.3, 7.4, 3.5, .5.5]      |
| komplexe zahlen       | `complex`  | [-1 + 9j, 2-77j, 72 + 11j] |
| Textzeichen           | `U`        | ["montag", "dienstag"]     |

: Typische Datentypen in NumPy {#tbl-datatypes .striped .hover}

::: {.callout-tip collapse="true"}

## Zwischenübung: Arrayinformationen auslesen

Diese Seite muss auf Grund des neuen NumPy Updates überarbeitet werden

::: {.callout-caution icon="false" collapse="true"}

## Lösung

:::

:::