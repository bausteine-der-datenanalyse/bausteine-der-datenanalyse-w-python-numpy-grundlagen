# Rechnen mit Arrays

## Arithmetische Funktionen

```{python}
#| echo: false
import numpy as np
```

Ein großer Vorteil an NumPy ist das Rechnen mit Arrays. Ohne NumPy müsste man 
entweder eine `Schleife` oder aber `List comprehension` benutzen, um mit 
sämtlichen Werten in der Liste zu rechnen. In NumPy fällt diese Unannehmlichkeit 
weg.

```{python}
a = np.array([1, 2, 3, 4, 5])

b = np.array([9, 8, 7, 6, 5])
```

Normale mathematische Operationen, wie die Addition, lassen sich auf zwei Arten 
ausdrücken. Entweder über die `np.add()` Funktion oder aber simpel über das `+` 
Zeichen.

```{python}
np.add(a,b)
```

```{python}
a + b
```

Für die anderen Rechenarten existieren auch Funktionen: `np.subtract()`, 
`np.multiply()` und `np.divide()`. 

Auch für die anderen höheren Rechenoperationen gibt es ebenfalls Funktionen:

* `np.exp(a)`
* `np.sqrt(a)`
* `np.power(a, 3)`
* `np.sin(a)`
* `np.cos(a)`
* `np.tan(a)`
* `np.log(a)`
* `a.dot(b)`

::: {.callout-warning}

## Arbeiten mit Winkelfunktionen

Wie auch am Taschenrechner birgt das Arbeiten mit den Winkelfunktionen 
(sin, cos, ...) die Fehlerquelle, dass man nicht mit Radian-Werten, sondern mit 
Grad-Werten arbeitet. Die Winkelfunktionen in numpy erwarten jedoch 
Radian-Werte. 

Für eine einfache Umrechnung bietet NumPy die Funktionen `np.grad2rad()`und 
`np.rad2grad()`.

:::

## Vergleiche

NumPy-Arrays lassen sich auch miteinander vergleichen. Betrachten wir die 
folgenden zwei Arrays:

```{python}
a = np.array([1, 2, 3, 4, 5])

b = np.array([9, 2, 7, 4, 5])
```

Möchten wir feststellen, ob diese zwei Arrays identisch sind, können wir 
den `==`-Komparator benutzen. Dieser vergleicht die Arrays elementweise.

```{python}
a == b
```

Es ist außerdem möglich Arrays mit den `>`- und `<`-Operatoren zu vergleichen:

```{python}
a < b
```

Möchte man Arrays mit Gleitkommazahlen vergleichen, ist es oftmals nötig, eine 
gewisse Toleranz zu benutzen, da bei Rechenoperationen minimale Rundungsfehler 
entstehen können. 

```{python}
a = np.array(0.1 + 0.2)
b = np.array(0.3)
a == b
```

Für diesen Fall gibt es eine Vergleichsfunktion `np.isclose(a,b,atol)`, wobei 
`atol` für die absolute Toleranz steht. Im folgenden Beispiel wird eine absolute 
Toleranz von 0,001 verwendet.

```{python}
a = np.array(0.1 + 0.2)
b = np.array(0.3)
print(np.isclose(a, b, atol=0.001))
```

::: {.callout-note collapse="true"}

## Warum ist 0.1 + 0.2 nicht gleich 0.3?

Zahlen werden intern als Binärzahlen dargestellt. So wie 1/3 nicht mit einer 
endlichen Anzahl an Ziffern korrekt dargestellt werden kann müssen Zahlen ggf. 
gerundet werden, um im Binärsystem dargestellt zu werden. 

```{python}
a = 0.1
b = 0.2
print(a + b)
```

:::

## Aggregatfunktionen

Für verschiedene Auswertungen benötigen wir Funktionen, wie etwa die Summen 
oder die Mittelwert-Funktion. Starten wir mit einem Beispiel Array a:

```{python}
a = np.array([1, 2, 3, 4, 8])
```

Die Summer wird über die Funktion `np.sum()` berechnet.
```{python}
np.sum(a)
```

Natürlich lassen sich auch der Minimalwert und der Maximalwert eines Arrays 
ermitteln. Die beiden Funktionen lauten `np.min()`und `np.max()`. 

```{python}
np.min(a)
```

Möchte man nicht das Maximum selbst, sondern die Position des Maximums bestimmen, 
wird statt `np.max` die Funktion `np.argmax`verwendet.

Für statistische Auswertungen werden häufig die Funktion für den Mittelwert 
`np.mean()`, die Funktion für den Median `np.median()`und die Funktion für die 
Standardabweichung `np.std()`verwendet.

```{python}
np.mean(a)
```

```{python}
np.median(a)
```

```{python}
np.std(a)
```

<!-- 
::: {.callout-tip collapse="true"}

## Übung: Rechnen mit Arrays



::: {.callout-caution icon="false" collapse="true"}


## Lösung

:::

::: -->